# WARNING - EXPERIMENTAL
# This file was auto generated from the existing API using the IntelliJ
# see https://www.jetbrains.com/help/idea/openapi.html#generate_openapi
# Manual changes were done for this 'spec' to work in-place with the
# model-server for now. A lot of changes were and are still necessary
# to make this OpenAPI a viable artifact. It will most likely be splitted
# into multiple OpenAPI files.

openapi: "3.0.3"
info:
  title: "model-server public API"
  description: "modelix public API"
  version: "0.0.1"
servers:
  - url: 'http://127.0.0.1:28101'
    description: local model-server
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "Model Server"
  /v2/server-id:
    get:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v2/user-id:
    get:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v2/generate-client-id:
    post:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /repos:
    get:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
  /headers:
    get:
      description: ""
      responses:
        "200":
          description: OK
  /health:
    get:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "healthy"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "not healthy"
  /v2/repositories:
    get:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v2/repositories/{repository}/branches:
    get:
      description: ""
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v2/repositories/{repository}/branches/{branch}:
    get:
      description: ""
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/VersionDelta"
    post:
      description: ""
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
# this was autogenerated but will break tests
# we need to manually design the content to allow
# type safe access on our APIs
#      requestBody:
#        content:
#          '*/*':
#            schema:
#              type: string
##              $ref: "#/components/schemas/VersionDelta"
#        required: true
      responses:
        "200":
          description: OK
#          content:
#            '*/*':
#              schema:
#                type: object
  /v2/repositories/{repository}/branches/{branch}/hash:
    get:
      description: ""
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v2/repositories/{repository}/branches/{branch}/listen:
    get:
      description: ""
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
        - name: Connection
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: string
        - name: Upgrade
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: string
        - name: Sec-WebSocket-Key
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: string
            Upgrade:
              required: true
              schema:
                type: string
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: string
  /v2/repositories/{repository}/branches/{branch}/poll:
    get:
      description: ""
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v2/repositories/{repository}/branches/{branch}/pollHash:
    get:
      description: ""
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v2/repositories/{repository}/branches/{branch}/query:
    post:
      description: ""
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
  /v2/repositories/{repository}/init:
    post:
      description: ""
      parameters:
        - name: useRoleIds
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v2/repositories/{repository}/versions/{versionHash}:
    get:
      description: ""
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v2/repositories/{repository}/versions/{versionHash}/history/{oldestVersionHash}:
    get:
      description: "TODO"
      responses:
        "200":
          description: OK
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: oldestVersionHash
          in: "path"
          required: true
          schema:
            type: string
  /v2/repositories/{repository}/versions/{versionHash}/query:
    post:
      description: ""
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
  /history:
    get:
      description: ""
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "../repos/"
  /history/{repoId}/{branch}:
    get:
      description: ""
      parameters:
        - name: repoId
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
        - name: limit
          in: "query"
          required: false
          schema:
            type: string
        - name: skip
          in: "query"
          required: false
          schema:
            type: string
        - name: head
          in: "query"
          required: false
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
  /history/{repoId}/{branch}/revert:
    post:
      description: ""
      parameters:
        - name: repoId
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
        - name: from
          in: "query"
          required: false
          schema:
            type: string
        - name: to
          in: "query"
          required: false
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "."
  /v2/versions/{versionHash}:
    get:
      description: ""
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v2/versions/{versionHash}/history/{oldestVersionHash}:
    get:
      description: "TODO"
      responses:
        "200":
          description: OK
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: oldestVersionHash
          in: "path"
          required: true
          schema:
            type: string
  /content:
    get:
      description: ""
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "../repos/"
  /content/{versionHash}:
    get:
      description: ""
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "version not found"
    post:
      description: ""
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/ContentExplorerExpandedNodes"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "version not found"
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /content/{versionHash}/{nodeId}:
    get:
      description: ""
      parameters:
        - name: nodeId
          in: "path"
          required: true
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: "node id not found"
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function2"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
  /json:
    get:
      description: ""
      responses:
        "200":
          description: OK
  /json/{repositoryId}:
    get:
      description: ""
      parameters:
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /json/{repositoryId}/{versionHash}:
    get:
      description: ""
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /json/{repositoryId}/{versionHash}/poll:
    get:
      description: ""
      parameters:
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /json/{repositoryId}/{versionHash}/update:
    post:
      description: ""
      parameters:
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /json/{repositoryId}/init:
    post:
      description: ""
      parameters:
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /json/{repositoryId}/ws:
    get:
      description: ""
      parameters:
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
        - name: Connection
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: string
        - name: Upgrade
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: string
        - name: Sec-WebSocket-Key
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: string
            Upgrade:
              required: true
              schema:
                type: string
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: string
  /json/generate-ids:
    post:
      description: ""
      parameters:
        - name: quantity
          in: "query"
          required: false
          schema:
            type: integer
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /counter/{key}:
    post:
      description: ""
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /get/{key}:
    get:
      description: ""
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /getAll:
    put:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /getEmail:
    get:
      description: ""
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /getRecursively/{key}:
    get:
      description: ""
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /poll/{key}:
    get:
      description: ""
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
        - name: lastKnownValue
          in: "query"
          required: false
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: ""
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /put/{key}:
    put:
      description: ""
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example#1:
                  value: OK
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
  /putAll:
    put:
      description: ""
      responses:
        "403":
          description: "Forbidden"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: string
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: string
  /json/v2/{repositoryId}/ws:
    get:
      description: ""
      parameters:
        - name: repositoryId
          in: "path"
          required: true
          schema:
            type: string
        - name: Connection
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: string
        - name: Upgrade
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: string
        - name: Sec-WebSocket-Key
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: string
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: string
            Upgrade:
              required: true
              schema:
                type: string
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: string



components:
  schemas:
    VersionDelta:
      title: VersionDelta
      type: object
      properties:
        versionHash:
            type: string
        baseVersion:
            type: string
        objects:
            $ref: '#/components/schemas/MapItem'
        objectsMap:
            $ref: '#/components/schemas/MapItem'
      required:
        - versionHash
        - objects
        - objectsMap


    MapItem:
      properties:
        value1:
          type: string
        value2:
          type: string


    ContentExplorerExpandedNodes:
      type: object
      properties:
        expandedNodeIds:
          type: array
          items:
            type: string
        expandAll:
          type: boolean
      required:
        - "expandedNodeIds"
    Function1:
      type: object
      properties: {}
    Function2:
      type: object
